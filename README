CPSC411 Assignment2

=== 1. DESCRIPTION: ===

	Parser/Stack code generator 
	- requires GenericPretty library (https://hackage.haskell.org/package/GenericPretty)	

=== 2. EXECUTION: ===

Install the GenericPretty library:

	cabal update
	cabal install GenericPretty

To compile the program, on the terminal enter the following commands:

	make

To run the program, on the terminal enter the following command:

	./A2Recogniser <input file> <output file>
	
=== 3. PROGRAM USE: ===

The program will parse the input file, display the AST, and output the stack code to the given output file name.

=== 4. ALGORITHMS and DESIGN DECISIONS: ===

Subtraction is represented using addition with one side negated.  
Support for the OP1 command has been added to the included stack.csh.
Assignment 2 lexer has been modified to not print the list of tokens.  

=== 5. FILES SUBMITTED: ===

	makefile
	README
	A2Lexer.x
	A2Recogniser.hs
	test1.m
	test2.m
	test3.m
	test4.m
	test5.m
	stack.csh -- edited to include an alias for OP1
	

=== 6. GRAMMAR TRANFORMATION: ===                         

Original:

	prog -> stmt.
	stmt -> IF expr THEN stmt ELSE stmt
			| WHILE expr DO stmt
			| INPUT ID
			| ID ASSIGN expr
			| WRITE expr
			| BEGIN stmtlist END.
	stmtlist -> stmtlist stmt SEMICOLON
			|.
	expr -> expr addop term
			| term.
	addop -> ADD
			| SUB.
	term -> term mulop factor
			| factor.
	mulop -> MUL
			| DIV.
	factor -> LPAR expr RPAR
			| ID
			| NUM
			| SUB NUM.
			
Transformed into Recursive Descent Grammar:

	prog -> stmt.
	stmt -> IF expr thenpart.
			| WHILE expr dopart.
			| INPUT ID.
			| ID ASSIGN expr.
			| WRITE expr.
			| BEGIN stmtlist endpart.
	thenpart -> THEN stmt elsepart.
	elsepart -> ELSE stmt.
	dopart -> DO stmt.
	endpart -> END.
	stmtlist -> stmtlist2.
	stmtlist2 -> IF expr thenpart semipart
			| WHILE expr dopart semipart
			| INPUT ID semipart
			| ID ASSIGN expr semipart
			| WRITE expr semipart
			| BEGIN stmtlist endpart semipart
			| .
	semipart -> SEMICOLON stmtlist2.
	expr -> term expr2.
	expr2 -> ADD term expr2.
			| SUB term expr2.
			| .
	term -> factor term2.
	term2 -> MUL factor term2.
			| DIV factor term2.
			| .
	factor -> LPAR expr rparpart.
			| ID.
			| NUM.
			| SUB NUM.
	rparpart -> RPAR.


	
	
